#pragma checksum "C:\Users\hisayin\source\repos\MapboxExample\MapboxExample\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1a6a3d5c269ebcd2beb9264e26b50d9434a28c2a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1a6a3d5c269ebcd2beb9264e26b50d9434a28c2a", @"/Views/Home/Index.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1a6a3d5c269ebcd2beb9264e26b50d9434a28c2a2709", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"">
    <title>Mapbox Haritalama</title>
    <style>
        body, html {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map {
            height: calc(100% - 40px); /* Buton yüksekliği düşüldü */
        }

        #button {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1;
        }
        .mapboxgl-popup {
            max-width: 500px;
            font-family: Arial, sans-serif;
            border-radius: 4px;
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);
            padding: 20px;
            background-color: #fff;
            overflow: auto;
            color: #333;
        }

            /* Başlık Stili */
            .mapboxgl-popup h3 {
                margin-top: 0;
                margin-bottom: 10px;
                font-size: 16px;
            }

            /* Etiket ve Giriş Kutusu Stili */
            .mapboxgl-popup label {
 ");
                WriteLiteral(@"               display: block;
                font-weight: bold;
                margin-bottom: 5px;
            }

            .mapboxgl-popup input[type=""text""],
            .mapboxgl-popup textarea {
                width: 90%;
                padding: 10px;
                border: 1px solid #ccc;
                border-radius: 4px;
                margin-bottom: 10px;
            }

        /* Kapatma Düğmesi Stili */
        .mapboxgl-popup-close-button {
            visibility: hidden;
            position: absolute;
            top: 10px;
            right: 10px;
        }

            .mapboxgl-popup-close-button:hover {
                background-color: #d00;
            }

        /* Kaydet Butonu Stili */
        .mapboxgl-popup-save-button {
            display: block;
            width: 100%;
            padding: 10px;
            background-color: #4CAF50;
            color: #fff;
            border: none;
            border-radius: 4px;
            cursor: po");
                WriteLiteral(@"inter;
        }
        .mapboxgl-popup-close-button-1 {
            position: absolute;
            top: 10px;
            right: 10px;
            /* Diğer stiller */
        }

            .mapboxgl-popup-save-button:hover {
                background-color: #45a049;
            }

        /* Fotoğraf İkonu Stili */
        .mapboxgl-popup-photo-icon {
            font-size: 20px;
            color: #888;
            margin-right: 5px;
        }
    </style>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1a6a3d5c269ebcd2beb9264e26b50d9434a28c2a6283", async() => {
                WriteLiteral(@"
    <div id=""map""></div>
    <button id=""button"" onclick=""addMarker()"">Konum</button>
    <script src=""https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.js""></script>
    <link href=""https://api.mapbox.com/mapbox-gl-js/v2.4.1/mapbox-gl.css"" rel=""stylesheet"" />

    <script>
        mapboxgl.accessToken = 'pk.eyJ1Ijoic2F5aW5icmFoaW0iLCJhIjoiY2s3Z2pya3QwMDBmbjNkbnI2OG1meXhrdSJ9.xdwkaHjniYxboYT-vkrQzA';
        var selectedPoint = null;
        var marker;

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [32.8541, 39.9208], // Ankara'nın merkezi koordinatları
            zoom: 10
        });
        var popup = new mapboxgl.Popup({
            closeButton: true, // Kapatma düğmesini göster
            closeOnClick: false // Popup dışına tıklandığında kapanmasını engelle
        });
        function addMarker() {
            // Nokta eklemek için Marker kullanımı
            button.disabled =");
                WriteLiteral(@" true;                      

            map.on('click', function (e) {
                // Haritaya tıklandığında nokta eklenir
                if (button.disabled == true) {
                    //var marker = new mapboxgl.Marker()
                    //    .setLngLat(map.getCenter())
                    //    .addTo(map);
                    var coordinates = e.lngLat;
                    if (popup.isOpen()) {
                        popup.remove();
                        return;
                    }
                    else {
                        addPopup(e.lngLat);
                    }
                   
                    //saveData();

                     marker = new mapboxgl.Marker()
                        .setLngLat(coordinates)
                        .addTo(map);

                    selectedPoint = {
                        coordinates: coordinates,
                    };


                    
                    button.disabled = false;

                }");
                WriteLiteral(@"
              
            });
        }
        function addPopup(LongLat){
            var coordinates = LongLat;

            var content = '<div class=""popup-content"">' +
                '<h3>Mekan Bilgileri</h3>' +
                '<label for=""name"">İsim:</label>' +
                '<input type=""text"" id=""name"" required>' +
                '<label for=""price"">Fiyat:</label>' +
                '<input type=""text"" id=""price"" required>' +
                '<label for=""food"">Neler Yedik:</label>' +
                '<textarea id=""food"" rows=""3""></textarea>' +
                '<div>' +
                '<label for=""photo"">Fotoğraf:</label>' +
                '<input type=""file"" id=""photo"">' +
                '<span class=""mapboxgl-popup-photo-icon"">&#128247;</span>' +
                '</div>' +
                '<button class=""mapboxgl-popup-save-button"" onclick=""saveData()"">Kaydet</button>' +
                '<button class=""mapboxgl-popup-close-button-1"" onclick=""closePopup()"">&#10006;</but");
                WriteLiteral(@"ton>' +
                '</div>';

            popup.setLngLat(coordinates)
                .setHTML(content)
                .addTo(map);
        }

        function closePopup() {
            
            if (selectedPoint !== null && selectedPoint.coordinates === marker.coordinates) {
                // Marker'ı haritadan kaldır
                marker.remove();
            }
            popup.remove();
        }

        function saveData() {
            var name = document.getElementById('name').value;
            var price = document.getElementById('price').value;
            var food = document.getElementById('food').value;
            var photo = document.getElementById('photo').files[0];

            // Değerleri kullanarak isteğe bağlı olarak bir veritabanına veya başka bir yere kaydedebilirsiniz.

            // Popup'ı kapat
            popup.remove();
        }

            // Harita üzerinde şehir sınırlarını ve yollarını göstermek için uygun verileri kullanabilirsini");
                WriteLiteral(@"z.
            // Örneğin GeoJSON veya bir harita servisinden alınan verileri kullanabilirsiniz.
            // Verileri haritaya eklemek için map.addLayer veya map.addSource yöntemlerini kullanabilirsiniz.
            // Ayrıntılı bir şekilde belirli bir veri kaynağına veya veri formatına bağlı olarak yardımcı olabilirim.

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
